{"ast":null,"code":"/*\n * Copyright (c) 2009 Nicholas C. Zakas. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/*\n * Base 64 implementation in JavaScript\n * Original source available at https://raw.github.com/nzakas/computer-science-in-javascript/02a2745b4aa8214f2cae1bf0b15b447ca1a91b23/encodings/base64/base64.js\n *\n * Linter refinement by Scott Andrews\n */\n\n'use strict';\n\n/*jshint bitwise: false */\nvar digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n/**\n * Base64-encodes a string of text.\n *\n * @param {string} text The text to encode.\n * @return {string} The base64-encoded string.\n */\nfunction base64Encode(text) {\n  if (/([^\\u0000-\\u00ff])/.test(text)) {\n    throw new Error('Can\\'t base64 encode non-ASCII characters.');\n  }\n  var i = 0,\n    cur,\n    prev,\n    byteNum,\n    result = [];\n  while (i < text.length) {\n    cur = text.charCodeAt(i);\n    byteNum = i % 3;\n    switch (byteNum) {\n      case 0:\n        //first byte\n        result.push(digits.charAt(cur >> 2));\n        break;\n      case 1:\n        //second byte\n        result.push(digits.charAt((prev & 3) << 4 | cur >> 4));\n        break;\n      case 2:\n        //third byte\n        result.push(digits.charAt((prev & 0x0f) << 2 | cur >> 6));\n        result.push(digits.charAt(cur & 0x3f));\n        break;\n    }\n    prev = cur;\n    i += 1;\n  }\n  if (byteNum === 0) {\n    result.push(digits.charAt((prev & 3) << 4));\n    result.push('==');\n  } else if (byteNum === 1) {\n    result.push(digits.charAt((prev & 0x0f) << 2));\n    result.push('=');\n  }\n  return result.join('');\n}\n\n/**\n * Base64-decodes a string of text.\n *\n * @param {string} text The text to decode.\n * @return {string} The base64-decoded string.\n */\nfunction base64Decode(text) {\n  //ignore white space\n  text = text.replace(/\\s/g, '');\n\n  //first check for any unexpected input\n  if (!/^[a-z0-9\\+\\/\\s]+\\={0,2}$/i.test(text) || text.length % 4 > 0) {\n    throw new Error('Not a base64-encoded string.');\n  }\n\n  //local variables\n  var cur,\n    prev,\n    digitNum,\n    i = 0,\n    result = [];\n\n  //remove any equals signs\n  text = text.replace(/\\=/g, '');\n\n  //loop over each character\n  while (i < text.length) {\n    cur = digits.indexOf(text.charAt(i));\n    digitNum = i % 4;\n    switch (digitNum) {\n      //case 0: first digit - do nothing, not enough info to work with\n\n      case 1:\n        //second digit\n        result.push(String.fromCharCode(prev << 2 | cur >> 4));\n        break;\n      case 2:\n        //third digit\n        result.push(String.fromCharCode((prev & 0x0f) << 4 | cur >> 2));\n        break;\n      case 3:\n        //fourth digit\n        result.push(String.fromCharCode((prev & 3) << 6 | cur));\n        break;\n    }\n    prev = cur;\n    i += 1;\n  }\n\n  //return a string\n  return result.join('');\n}\nmodule.exports = {\n  encode: base64Encode,\n  decode: base64Decode\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}