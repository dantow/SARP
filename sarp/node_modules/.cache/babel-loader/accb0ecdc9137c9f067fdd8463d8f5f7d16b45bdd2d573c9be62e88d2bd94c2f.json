{"ast":null,"code":"'use strict';\n\nvar Typeahead = require('suggestions');\nvar debounce = require('lodash.debounce');\nvar extend = require('xtend');\nvar EventEmitter = require('events').EventEmitter;\nvar exceptions = require('./exceptions');\nvar MapboxClient = require('mapbox/lib/services/geocoding');\n\n/**\n * A geocoder component using Mapbox Geocoding API\n * @class MapboxGeocoder\n *\n * @param {Object} options\n * @param {String} [options.accessToken=null] Required unless `mapboxgl.accessToken` is set globally\n * @param {Number} [options.zoom=16] On geocoded result what zoom level should the map animate to.\n * @param {Boolean} [options.flyTo=true] If false, animating the map to a selected result is disabled.\n * @param {String} [options.placeholder=\"Search\"] Override the default placeholder attribute value.\n * @example\n * var geocoder = new MapboxGeocoder();\n * map.addControl(geocoder);\n * @return {MapboxGeocoder} `this`\n */\nfunction MapboxGeocoder(options) {\n  this._eventEmitter = new EventEmitter();\n  this.options = extend({}, this.options, options);\n}\nMapboxGeocoder.prototype = {\n  options: {\n    placeholder: 'Search',\n    zoom: 16,\n    flyTo: true\n  },\n  onAdd: function (map) {\n    this._map = map;\n    this.mapboxClient = new MapboxClient(this.options.accessToken);\n    this._onChange = this._onChange.bind(this);\n    this._onKeyDown = this._onKeyDown.bind(this);\n    this._onQueryResult = this._onQueryResult.bind(this);\n    this._clear = this._clear.bind(this);\n    var el = this.container = document.createElement('div');\n    el.className = 'mapboxgl-ctrl-geocoder mapboxgl-ctrl';\n    var icon = document.createElement('span');\n    icon.className = 'geocoder-icon geocoder-icon-search';\n    this._inputEl = document.createElement('input');\n    this._inputEl.type = 'text';\n    this._inputEl.placeholder = this.options.placeholder;\n    this._inputEl.addEventListener('keydown', this._onKeyDown);\n    this._inputEl.addEventListener('change', this._onChange);\n    var actions = document.createElement('div');\n    actions.classList.add('geocoder-pin-right');\n    this._clearEl = document.createElement('button');\n    this._clearEl.className = 'geocoder-icon geocoder-icon-close';\n    this._clearEl.addEventListener('click', this._clear);\n    this._loadingEl = document.createElement('span');\n    this._loadingEl.className = 'geocoder-icon geocoder-icon-loading';\n    actions.appendChild(this._clearEl);\n    actions.appendChild(this._loadingEl);\n    el.appendChild(icon);\n    el.appendChild(this._inputEl);\n    el.appendChild(actions);\n    this._typeahead = new Typeahead(this._inputEl, [], {\n      filter: false\n    });\n    this._typeahead.getItemValue = function (item) {\n      return item.place_name;\n    };\n    return el;\n  },\n  onRemove: function () {\n    this.container.parentNode.removeChild(this.container);\n    this._map = null;\n    return this;\n  },\n  _onKeyDown: debounce(function (e) {\n    if (!e.target.value) {\n      return this._clearEl.style.display = 'none';\n    }\n\n    // TAB, ESC, LEFT, RIGHT, ENTER, UP, DOWN\n    if (e.metaKey || [9, 27, 37, 39, 13, 38, 40].indexOf(e.keyCode) !== -1) return;\n    this._geocode(e.target.value);\n  }, 200),\n  _onChange: function () {\n    if (this._inputEl.value) this._clearEl.style.display = 'block';\n    var selected = this._typeahead.selected;\n    if (selected) {\n      if (this.options.flyTo) {\n        if (!exceptions[selected.id] && (selected.bbox && selected.context && selected.context.length <= 3 || selected.bbox && !selected.context)) {\n          var bbox = selected.bbox;\n          this._map.fitBounds([[bbox[0], bbox[1]], [bbox[2], bbox[3]]]);\n        } else if (exceptions[selected.id]) {\n          // Certain geocoder search results return (and therefore zoom to fit)\n          // an unexpectedly large bounding box: for example, both Russia and the\n          // USA span both sides of -180/180, or France includes the island of\n          // Reunion in the Indian Ocean. An incomplete list of these exceptions\n          // at ./exceptions.json provides \"reasonable\" bounding boxes as a\n          // short-term solution; this may be amended as necessary.\n          this._map.fitBounds(exceptions[selected.id].bbox);\n        } else {\n          this._map.flyTo({\n            center: selected.center,\n            zoom: this.options.zoom\n          });\n        }\n      }\n      this._eventEmitter.emit('result', {\n        result: selected\n      });\n    }\n  },\n  _geocode: function (searchInput) {\n    this._loadingEl.style.display = 'block';\n    this._eventEmitter.emit('loading');\n    var request = this.mapboxClient.geocodeForward(searchInput, this.options);\n    request.then(function (response) {\n      this._loadingEl.style.display = 'none';\n      var res = response.entity;\n      if (res.features.length) {\n        this._clearEl.style.display = 'block';\n      } else {\n        this._clearEl.style.display = 'none';\n        this._typeahead.selected = null;\n      }\n      this._eventEmitter.emit('results', res);\n      this._typeahead.update(res.features);\n    }.bind(this));\n    request.catch(function (err) {\n      this._loadingEl.style.display = 'none';\n      this._eventEmitter.emit('error', {\n        error: err\n      });\n    }.bind(this));\n    return request;\n  },\n  _clear: function () {\n    this._inputEl.value = '';\n    this._typeahead.selected = null;\n    this._typeahead.clear();\n    this._onChange();\n    this._inputEl.focus();\n    this._clearEl.style.display = 'none';\n    this._eventEmitter.emit('clear');\n  },\n  _onQueryResult: function (response) {\n    var results = response.entity;\n    if (!results.features.length) return;\n    var result = results.features[0];\n    this._typeahead.selected = result;\n    this._inputEl.value = result.place_name;\n    this._onChange();\n  },\n  /**\n   * Set & query the input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  query: function (searchInput) {\n    this._geocode(searchInput).then(this._onQueryResult);\n    return this;\n  },\n  /**\n   * Set input\n   * @param {string} searchInput location name or other search input\n   * @returns {MapboxGeocoder} this\n   */\n  setInput: function (searchInput) {\n    // Set input value to passed value and clear everything else.\n    this._inputEl.value = searchInput;\n    this._typeahead.selected = null;\n    this._typeahead.clear();\n    this._onChange();\n    return this;\n  },\n  /**\n   * Subscribe to events that happen within the plugin.\n   * @param {String} type name of event. Available events and the data passed into their respective event objects are:\n   *\n   * - __clear__ `Emitted when the input is cleared`\n   * - __loading__ `Emitted when the geocoder is looking up a query`\n   * - __results__ `{ results } Fired when the geocoder returns a response`\n   * - __result__ `{ result } Fired when input is set`\n   * - __error__ `{ error } Error as string\n   * @param {Function} fn function that's called when the event is emitted.\n   * @returns {MapboxGeocoder} this;\n   */\n  on: function (type, fn) {\n    this._eventEmitter.on(type, fn);\n    return this;\n  },\n  /**\n   * Remove an event\n   * @returns {MapboxGeocoder} this\n   * @param {String} type Event name.\n   * @param {Function} fn Function that should unsubscribe to the event emitted.\n   */\n  off: function (type, fn) {\n    this._eventEmitter.removeListener(type, fn);\n    return this;\n  }\n};\nmodule.exports = MapboxGeocoder;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}