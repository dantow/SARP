{"ast":null,"code":"import mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from 'mapbox-gl-geocoder';\nexport const initializeMap = addMarker => {\n  const veszprem = {\n    longitude: 17.909302,\n    latitude: 47.102809\n  };\n  const containerId = 'map';\n  const zoomLevel = 12;\n  return new mapboxgl.Map({\n    container: containerId,\n    style: 'mapbox://styles/mapbox/streets-v12',\n    center: [veszprem.longitude, veszprem.latitude],\n    zoom: zoomLevel\n  }).on('click', event => {\n    const mouseCoordinate = event.lngLat.wrap();\n    addMarker(mouseCoordinate);\n  }).addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n};\nexport const addGeocoder = (map, addMarker) => {\n  const geocoder = new MapboxGeocoder({\n    accessToken: mapboxgl.accessToken,\n    mapboxgl: mapboxgl\n  });\n  geocoder.on('result', event => {\n    const resultLongitude = event.result.center[0];\n    const resultLatitude = event.result.center[1];\n    const geocoderResultCoordinates = {\n      lng: resultLongitude,\n      lat: resultLatitude\n    };\n    addMarker(geocoderResultCoordinates);\n  });\n  map.addControl(geocoder);\n};\nexport const drawRoute = (data, map) => {\n  const instructions = document.getElementById('instructions');\n  const legs = data.legs;\n  let tripInstructions = '';\n  for (const step of legs) {\n    const destination = step.summary.split(',').join(' => ', ',');\n    tripInstructions += `<li id='instruction-item'>${destination}\n                          <div>${Math.round(step.distance)} meter </div>\n                          <div>${Math.floor(step.duration / 60)} min </div>\n                          </li>`;\n  }\n  instructions.innerHTML = `<p><strong>Trip distance: ${Math.round(data.distance)} meter <p><strong>Trip duration: ${Math.floor(data.duration / 60)} min </strong></p><ol>${tripInstructions}</ol>`;\n  const route = data.geometry.coordinates;\n  const geojson = {\n    type: 'Feature',\n    properties: {},\n    geometry: {\n      type: 'LineString',\n      coordinates: route\n    }\n  };\n  if (map.getSource('route')) {\n    map.getSource('route').setData(geojson);\n  } else {\n    map.addLayer({\n      id: 'route',\n      type: 'line',\n      source: {\n        type: 'geojson',\n        data: geojson\n      },\n      layout: {\n        'line-join': 'round',\n        'line-cap': 'round'\n      },\n      paint: {\n        'line-color': '#3887be',\n        'line-width': 5,\n        'line-opacity': 0.75\n      }\n    });\n  }\n  ;\n};","map":{"version":3,"names":["mapboxgl","MapboxGeocoder","initializeMap","addMarker","veszprem","longitude","latitude","containerId","zoomLevel","Map","container","style","center","zoom","on","event","mouseCoordinate","lngLat","wrap","addControl","NavigationControl","addGeocoder","map","geocoder","accessToken","resultLongitude","result","resultLatitude","geocoderResultCoordinates","lng","lat","drawRoute","data","instructions","document","getElementById","legs","tripInstructions","step","destination","summary","split","join","Math","round","distance","floor","duration","innerHTML","route","geometry","coordinates","geojson","type","properties","getSource","setData","addLayer","id","source","layout","paint"],"sources":["/home/rnorbert/IdeaProjects/SARP/sarp/src/components/map/helpers/mapInitializer.js"],"sourcesContent":["import mapboxgl from 'mapbox-gl'\nimport MapboxGeocoder from 'mapbox-gl-geocoder'\n\nexport const initializeMap = (addMarker) => {\n  const veszprem = { longitude: 17.909302, latitude: 47.102809 }\n  const containerId = 'map'\n  const zoomLevel = 12\n\n  return new mapboxgl.Map({\n    container: containerId,\n    style: 'mapbox://styles/mapbox/streets-v12',\n    center: [veszprem.longitude, veszprem.latitude],\n    zoom: zoomLevel\n  }).on('click', (event) => {\n    const mouseCoordinate = event.lngLat.wrap()\n    addMarker(mouseCoordinate)\n  }).addControl(new mapboxgl.NavigationControl(), 'bottom-right')\n}\n\nexport const addGeocoder = (map, addMarker) => {\n  const geocoder = new MapboxGeocoder({\n    accessToken: mapboxgl.accessToken,\n    mapboxgl: mapboxgl\n  })\n\n  geocoder.on('result', (event) => {\n    const resultLongitude = event.result.center[0]\n    const resultLatitude = event.result.center[1]\n    const geocoderResultCoordinates = { lng: resultLongitude, lat: resultLatitude }\n\n    addMarker(geocoderResultCoordinates)\n  })\n  map.addControl(geocoder)\n}\n\nexport const drawRoute = (data, map) => {\n  const instructions = document.getElementById('instructions')\n  const legs = data.legs\n\n  let tripInstructions = ''\n  for (const step of legs) {\n    const destination = step.summary.split(',').join(' => ', ',')\n    tripInstructions += `<li id='instruction-item'>${destination}\n                          <div>${Math.round(step.distance)} meter </div>\n                          <div>${Math.floor(step.duration / 60)} min </div>\n                          </li>`\n  }\n  instructions.innerHTML = `<p><strong>Trip distance: ${Math.round(\n    data.distance\n  )} meter <p><strong>Trip duration: ${Math.floor(\n    data.duration / 60\n  )} min </strong></p><ol>${tripInstructions}</ol>`\n\n  const route = data.geometry.coordinates\n  const geojson = {\n    type: 'Feature',\n    properties: {},\n    geometry: {\n      type: 'LineString',\n      coordinates: route\n    }\n  }\n\n  if (map.getSource('route')) {\n    map.getSource('route').setData(geojson)\n  } else {\n    map.addLayer({\n      id: 'route',\n      type: 'line',\n      source: {\n        type: 'geojson',\n        data: geojson\n      },\n      layout: {\n        'line-join': 'round',\n        'line-cap': 'round'\n      },\n      paint: {\n        'line-color': '#3887be',\n        'line-width': 5,\n        'line-opacity': 0.75\n      }\n    })\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}