{"ast":null,"code":"function setInsturctions(data) {\n  const oneMinuteInSeconds = 60;\n  const instructions = document.getElementById('instructions');\n  const tripDistance = Math.round(data.distance);\n  const tripDuration = Math.floor(data.duration / oneMinuteInSeconds);\n  const legs = data.legs;\n  let tripInstructions = '';\n  for (const step of legs) {\n    const destination = step.summary.split(',').join(' => ', ',');\n    const stepDistance = Math.round(step.distance);\n    const stepDuration = Math.floor(step.duration / oneMinuteInSeconds);\n    tripInstructions += `<li id='instruction-item'> ${destination}\n                           <div>${stepDistance} meter </div>\n                           <div>${stepDuration} min </div>\n                         </li>`;\n  }\n  instructions.innerHTML = `<p>\n                              <strong>Trip distance: ${tripDistance} meter\n                            </p>\n                            <p>\n                              <strong>Trip duration: ${tripDuration} min </strong>\n                            </p>\n                            <ol>${tripInstructions}</ol>`;\n}\nexport const drawRoute = (data, map) => {\n  setInsturctions(data);\n  const route = data.geometry.coordinates;\n  const geojson = {\n    type: 'Feature',\n    properties: {},\n    geometry: {\n      type: 'LineString',\n      coordinates: route\n    }\n  };\n  if (map.getSource('route')) {\n    map.getSource('route').setData(geojson);\n  } else {\n    map.addLayer({\n      id: 'route',\n      type: 'line',\n      source: {\n        type: 'geojson',\n        data: geojson\n      },\n      layout: {\n        'line-join': 'round',\n        'line-cap': 'round'\n      },\n      paint: {\n        'line-color': '#3887be',\n        'line-width': 5,\n        'line-opacity': 0.75\n      }\n    });\n  }\n};","map":{"version":3,"names":["setInsturctions","data","oneMinuteInSeconds","instructions","document","getElementById","tripDistance","Math","round","distance","tripDuration","floor","duration","legs","tripInstructions","step","destination","summary","split","join","stepDistance","stepDuration","innerHTML","drawRoute","map","route","geometry","coordinates","geojson","type","properties","getSource","setData","addLayer","id","source","layout","paint"],"sources":["/home/rnorbert/IdeaProjects/SARP/sarp/src/components/map/mapbox/helpers/routeDrawer.js"],"sourcesContent":["function setInsturctions (data) {\n  const oneMinuteInSeconds = 60\n  const instructions = document.getElementById('instructions')\n  const tripDistance = Math.round(data.distance)\n  const tripDuration = Math.floor(data.duration / oneMinuteInSeconds)\n  const legs = data.legs\n  let tripInstructions = ''\n\n  for (const step of legs) {\n    const destination = step.summary.split(',').join(' => ', ',')\n    const stepDistance = Math.round(step.distance)\n    const stepDuration = Math.floor(step.duration / oneMinuteInSeconds)\n\n    tripInstructions += `<li id='instruction-item'> ${destination}\n                           <div>${stepDistance} meter </div>\n                           <div>${stepDuration} min </div>\n                         </li>`\n  }\n\n  instructions.innerHTML = `<p>\n                              <strong>Trip distance: ${tripDistance} meter\n                            </p>\n                            <p>\n                              <strong>Trip duration: ${tripDuration} min </strong>\n                            </p>\n                            <ol>${tripInstructions}</ol>`\n}\n\nexport const drawRoute = (data, map) => {\n  setInsturctions(data)\n\n  const route = data.geometry.coordinates\n  const geojson = {\n    type: 'Feature',\n    properties: {},\n    geometry: {\n      type: 'LineString',\n      coordinates: route\n    }\n  }\n\n  if (map.getSource('route')) {\n    map.getSource('route').setData(geojson)\n  } else {\n    map.addLayer({\n      id: 'route',\n      type: 'line',\n      source: {\n        type: 'geojson',\n        data: geojson\n      },\n      layout: {\n        'line-join': 'round',\n        'line-cap': 'round'\n      },\n      paint: {\n        'line-color': '#3887be',\n        'line-width': 5,\n        'line-opacity': 0.75\n      }\n    })\n  }\n}\n"],"mappings":"AAAA,SAASA,eAAeA,CAAEC,IAAI,EAAE;EAC9B,MAAMC,kBAAkB,GAAG,EAAE;EAC7B,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAAC,cAAc,CAAC;EAC5D,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACP,IAAI,CAACQ,QAAQ,CAAC;EAC9C,MAAMC,YAAY,GAAGH,IAAI,CAACI,KAAK,CAACV,IAAI,CAACW,QAAQ,GAAGV,kBAAkB,CAAC;EACnE,MAAMW,IAAI,GAAGZ,IAAI,CAACY,IAAI;EACtB,IAAIC,gBAAgB,GAAG,EAAE;EAEzB,KAAK,MAAMC,IAAI,IAAIF,IAAI,EAAE;IACvB,MAAMG,WAAW,GAAGD,IAAI,CAACE,OAAO,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC;IAC7D,MAAMC,YAAY,GAAGb,IAAI,CAACC,KAAK,CAACO,IAAI,CAACN,QAAQ,CAAC;IAC9C,MAAMY,YAAY,GAAGd,IAAI,CAACI,KAAK,CAACI,IAAI,CAACH,QAAQ,GAAGV,kBAAkB,CAAC;IAEnEY,gBAAgB,IAAK,8BAA6BE,WAAY;AAClE,kCAAkCI,YAAa;AAC/C,kCAAkCC,YAAa;AAC/C,+BAA+B;EAC7B;EAEAlB,YAAY,CAACmB,SAAS,GAAI;AAC5B,uDAAuDhB,YAAa;AACpE;AACA;AACA,uDAAuDI,YAAa;AACpE;AACA,kCAAkCI,gBAAiB,OAAM;AACzD;AAEA,OAAO,MAAMS,SAAS,GAAGA,CAACtB,IAAI,EAAEuB,GAAG,KAAK;EACtCxB,eAAe,CAACC,IAAI,CAAC;EAErB,MAAMwB,KAAK,GAAGxB,IAAI,CAACyB,QAAQ,CAACC,WAAW;EACvC,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,SAAS;IACfC,UAAU,EAAE,CAAC,CAAC;IACdJ,QAAQ,EAAE;MACRG,IAAI,EAAE,YAAY;MAClBF,WAAW,EAAEF;IACf;EACF,CAAC;EAED,IAAID,GAAG,CAACO,SAAS,CAAC,OAAO,CAAC,EAAE;IAC1BP,GAAG,CAACO,SAAS,CAAC,OAAO,CAAC,CAACC,OAAO,CAACJ,OAAO,CAAC;EACzC,CAAC,MAAM;IACLJ,GAAG,CAACS,QAAQ,CAAC;MACXC,EAAE,EAAE,OAAO;MACXL,IAAI,EAAE,MAAM;MACZM,MAAM,EAAE;QACNN,IAAI,EAAE,SAAS;QACf5B,IAAI,EAAE2B;MACR,CAAC;MACDQ,MAAM,EAAE;QACN,WAAW,EAAE,OAAO;QACpB,UAAU,EAAE;MACd,CAAC;MACDC,KAAK,EAAE;QACL,YAAY,EAAE,SAAS;QACvB,YAAY,EAAE,CAAC;QACf,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}